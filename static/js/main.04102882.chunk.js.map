{"version":3,"sources":["components/news-card.tsx","components/loading.tsx","components/error.tsx","pages/_common.tsx","pages/news-list.tsx","pages/news-detail.tsx","routes.tsx","api/client.ts","app.tsx","service-worker.ts","index.tsx"],"names":["NewsCard","featured","item","className","to","id","style","backgroundImage","img","title","Loading","ErrorComponent","error","isHome","message","role","aria-label","errorPageLayout","content","LIST_NEWS","gql","NewsList","useQuery","variables","skip","loading","data","fetchMore","newsList","rows","length","totalRows","map","newsItem","i","key","onClick","updateQuery","previous","fetchMoreResult","GET_NEWS","NewsDetail","useParams","postDomainSlash","url","indexOf","preDomainSlash","lastIndexOf","domain","slice","href","Routes","exact","path","component","NewsItem","client","ApolloClient","uri","App","Boolean","window","location","hostname","exec","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.04102882.chunk.js","sourcesContent":["import React from 'react'\nimport {Link} from 'react-router-dom'\n\nexport interface NewsItemSchema {\n\tid: string;\n\ttitle: string;\n\timg: string;\n}\n\nconst NewsCard: React.FC<{\n\tfeatured?: boolean;\n\titem: NewsItemSchema;\n}> = ({featured, item}) => {\n\tlet className = 'news-card'\n\tif (featured) {\n\t\tclassName += ' is-featured'\n\t}\n\n\treturn (\n\t\t<Link\n\t\t\tclassName={className}\n\t\t\tto={`/news/${item.id}`}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName=\"card-image\"\n\t\t\t\tstyle={{\n\t\t\t\t\tbackgroundImage: `url('${item.img}')`\n\t\t\t\t}}\n\t\t\t>\n\n\t\t\t</div>\n\t\t\t<div className=\"card-content\">\n\t\t\t\t<h4 className=\"card-title\">{item.title}</h4>\n\t\t\t</div>\n\t\t</Link>\n\t)\n}\n\nexport default NewsCard\n","import React from 'react'\n\nconst Loading: React.FC = () => (\n\t<div className=\"loading\">\n\t\t<div className=\"lds-dual-ring\" />\n\t\t<p className=\"loading-message\">Loading the hottest takes</p>\n\t</div>\n)\n\nexport default Loading\n","import React from 'react'\nimport {Link} from 'react-router-dom'\n\nconst ErrorComponent: React.FC<{\n\terror?: Error;\n\tmessage?: string;\n\tisHome?: boolean;\n}> = ({error, isHome, message}) => {\n\tif (error && !message) {\n\t\tmessage = error.message\n\t}\n\n\treturn (\n\t\t<div className=\"error-message\">\n\t\t\t{message ? (\n\t\t\t\t<p>{message}</p>\n\t\t\t) : (\n\t\t\t\t<p>\n\t\t\t\t\tSome unknown error happened <span role=\"img\" aria-label=\"sad\">ðŸ˜¢</span>\n\t\t\t\t</p>\n\t\t\t)}\n\t\t\t{isHome ? null : (\n\t\t\t\t<p>\n\t\t\t\t\t<Link\n\t\t\t\t\t\tto=\"/\"\n\t\t\t\t\t>Let's go back home and try again</Link>\n\t\t\t\t</p>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n\nexport default ErrorComponent\n","import React from 'react'\n\n/**\n * Common layout for error page\n *\n * @param content {React.ReactElement} Content\n */\nexport function errorPageLayout(content: React.ReactElement): React.ReactElement {\n\treturn <div className=\"container\">\n\t\t<div className=\"section\">\n\t\t\t{content}\n\t\t</div>\n\t</div>\n}\n","import {useQuery} from '@apollo/react-hooks'\nimport {gql} from 'apollo-boost'\nimport React from 'react'\n\nimport NewsCard, {NewsItemSchema as NewsItem} from '../components/news-card'\nimport Loading from '../components/loading'\nimport ErrorComponent from '../components/error'\nimport {errorPageLayout} from './_common'\n\nexport const LIST_NEWS = gql`\n\tquery LIST_NEWS($skip: Int!) {\n\t\tnewsList(skip: $skip, limit: 10) {\n\t\t\ttotalRows,\n\t\t\trows {\n\t\t\t\tid,\n\t\t\t\ttitle,\n\t\t\t\timg\n\t\t\t}\n\t\t}\n\t}\n`\n\ninterface NewsListData {\n\tnewsList: {\n\t\ttotalRows: number;\n\t\trows: NewsItem[];\n\t};\n}\ninterface NewsListVars {\n\tskip: number;\n}\n\nconst NewsList: React.FC = () => {\n\tconst {loading, error, data, fetchMore} = useQuery<NewsListData, NewsListVars>(LIST_NEWS, {\n\t\tvariables: {\n\t\t\tskip: 0\n\t\t}\n\t})\n\n\tif (loading) {\n\t\treturn <Loading />\n\t}\n\n\tif (error) {\n\t\treturn errorPageLayout(\n\t\t\t<ErrorComponent\n\t\t\t\terror={error}\n\t\t\t/>\n\t\t)\n\t}\n\n\tif (!data || data.newsList.rows.length === 0) {\n\t\treturn errorPageLayout(\n\t\t\t<ErrorComponent\n\t\t\t\tmessage=\"No Data\"\n\t\t\t/>\n\t\t)\n\t}\n\n\tconst {rows, totalRows} = data.newsList\n\n\tconst loadMore = (): void => {\n\t\tfetchMore({\n\t\t\tvariables: {\n\t\t\t\tskip: rows.length\n\t\t\t},\n\t\t\tupdateQuery: (previous, {fetchMoreResult}) => {\n\t\t\t\tif (!fetchMoreResult) {\n\t\t\t\t\treturn previous\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\t...previous,\n\t\t\t\t\tnewsList: {\n\t\t\t\t\t\t...previous.newsList,\n\t\t\t\t\t\trows: [\n\t\t\t\t\t\t\t...previous.newsList.rows,\n\t\t\t\t\t\t\t...fetchMoreResult.newsList.rows\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div className=\"section\">\n\t\t\t\t<div className=\"news-list\">\n\t\t\t\t\t{rows.map((newsItem: NewsItem, i) => (\n\t\t\t\t\t\t<NewsCard\n\t\t\t\t\t\t\tkey={newsItem.id}\n\t\t\t\t\t\t\tfeatured={i < 2}\n\t\t\t\t\t\t\titem={newsItem}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t{\n\t\t\t\t\trows.length < totalRows ?\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"button is-fullwidth\"\n\t\t\t\t\t\t\tonClick={loadMore}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tLoad More\n\t\t\t\t\t\t</button> :\n\t\t\t\t\t\tnull\n\t\t\t\t}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default NewsList\n","import {useQuery} from '@apollo/react-hooks'\nimport {gql} from 'apollo-boost'\nimport React from 'react'\nimport {useParams} from 'react-router'\n\nimport {errorPageLayout} from './_common'\nimport Loading from '../components/loading'\nimport ErrorComponent from '../components/error'\n\nexport const GET_NEWS = gql`\n\tquery GET_NEWS($id: ID!) {\n\t\tnewsItem(id: $id) {\n\t\t\tid,\n\t\t\ttitle,\n\t\t\tcontent,\n\t\t\turl,\n\t\t\timg\n\t\t}\n\t}\n`\n\nexport interface NewsItem {\n\tid: string;\n\ttitle: string;\n\tcontent: string;\n\turl: string;\n\timg: string;\n}\ninterface NewsItemData {\n\tnewsItem?: NewsItem;\n}\ninterface NewsListVars {\n\tid: string;\n}\n\nconst NewsDetail: React.FC = () => {\n\tconst {id} = useParams<{id: string}>()\n\n\tconst {loading, error, data} = useQuery<NewsItemData, NewsListVars>(GET_NEWS, {\n\t\tvariables: {\n\t\t\tid\n\t\t}\n\t})\n\n\tif (loading) {\n\t\treturn <Loading />\n\t}\n\n\tif (error) {\n\t\treturn errorPageLayout(\n\t\t\t<ErrorComponent\n\t\t\t\terror={error}\n\t\t\t\tisHome={true}\n\t\t\t/>\n\t\t)\n\t}\n\n\tif (!data || !data.newsItem) {\n\t\treturn errorPageLayout(\n\t\t\t<ErrorComponent\n\t\t\t\tmessage=\"News not found\"\n\t\t\t\tisHome={true}\n\t\t\t/>\n\t\t)\n\t}\n\n\tconst {newsItem: item} = data\n\t// Ignore http(s)://[example.com]/asdfqwer - [this part]\n\tlet postDomainSlash = item.url.indexOf('/', 8)\n\tif (postDomainSlash === -1) {\n\t\tpostDomainSlash = item.url.length\n\t}\n\n\tlet preDomainSlash = item.url.lastIndexOf('/', postDomainSlash - 1)\n\tif (preDomainSlash === -1) {\n\t\tpreDomainSlash = 0\n\t}\n\n\tconst domain = item.url.slice(preDomainSlash + 1, postDomainSlash)\n\n\treturn (\n\t\t<div className=\"news-detail\">\n\t\t\t<div className=\"news-image-container\">\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"news-image\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundImage: `url('${item.img}')`\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"news-content\">\n\t\t\t\t\t<h1 className=\"news-title\">\n\t\t\t\t\t\t<a className=\"news-title-link\" href={item.url}>{item.title}</a>\n\t\t\t\t\t</h1>\n\t\t\t\t\t<p>{item.content}</p>\n\t\t\t\t\t<a className=\"button news-read-more\" href={item.url}>\n\t\t\t\t\t\tRead more at {domain} &raquo;\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default NewsDetail\n","import React from 'react'\nimport {Switch, Route} from 'react-router-dom'\nimport NewsList from './pages/news-list'\nimport NewsItem from './pages/news-detail'\n\nconst Routes: React.FC = () => (\n\t<Switch>\n\t\t<Route exact path=\"/\" component={NewsList} />\n\t\t<Route path=\"/news/:id\" component={NewsItem} />\n\t</Switch>\n)\n\nexport default Routes\n","import ApolloClient from 'apollo-boost'\n\nconst client = new ApolloClient({\n\turi: 'https://news-reader.stagnationlab.dev/graphql'\n})\n\nexport default client\n","import React from 'react'\n// Use HashRouter for the easiest way to deploy to github pages\nimport {HashRouter as Router, Link} from 'react-router-dom'\nimport {ApolloProvider} from '@apollo/react-hooks'\n\nimport Routes from './routes'\nimport client from './api/client'\n\nconst App: React.FC = () => (\n\t<Router>\n\t\t<ApolloProvider client={client}>\n\t\t\t<div className=\"app\">\n\t\t\t\t<header className=\"app-header\">\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<div className=\"header\">\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tclassName=\"brand\"\n\t\t\t\t\t\t\t\tto=\"/\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSL News\n\t\t\t\t\t\t\t\t<span className=\"flavor-text\">The news... that stags</span>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</header>\n\n\t\t\t\t<Routes />\n\t\t\t</div>\n\t\t</ApolloProvider>\n\t</Router>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t/^127(?:\\.(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)){3}$/.exec(window.location.hostname)\n)\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config): void {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(\n\t\t\t(process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n\t\t\twindow.location.href\n\t\t)\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config)\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing\n\t\t\t\tif (!installingWorker) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.')\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error)\n\t\t})\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type')\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n        (contentType !== null && !contentType.includes('javascript'))\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t)\n\t\t})\n}\n\nexport function unregister(): void {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister()\n\t\t})\n\t}\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './assets/style/main.scss'\nimport App from './app'\nimport * as serviceWorker from './service-worker'\n\nReactDOM.render(<App />, document.querySelector('#root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}